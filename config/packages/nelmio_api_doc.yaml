nelmio_api_doc:
  models: { use_jms: false }
  documentation:
    info:
      title: Eat Api Documentation
      description: This is an awesome API REST to find restaurants!
      version: 1.0.0
    components:
      securitySchemes:
        Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
          in: header
      schemas:
        RestaurantOwnerData:
          type: object
          properties:
            restaurant_owner_first_name:
              type: string
              example: romain
            restaurant_owner_last_name:
              type: string
              example: silvy
            restaurant_owner_email:
              type: string
              example: romain@silvy.com
            restaurant_owner_password:
              type: string
              example: bourgogne
        RestaurantOwnerDataUpdate:
          type: object
          properties:
            restaurant_owner_first_name:
              type: string
              example: romain
            restaurant_owner_last_name:
              type: string
              example: silvy
            restaurant_owner_email:
              type: string
              example: romain@silvy.com
        RestaurantData:
          type: object
          properties:
            restaurant_name:
              type: string
              example: Le petit resto
            restaurant_latitude:
              type: string
              example: -3.790068
            restaurant_longitude:
              type: string
              example: 60.269705
            restaurant_description:
              type: string
              example: Un petit resto sympa
            restaurant_phone:
              type: string
              example: 0123456789
            idOwner:
              type: integer
              example: 101
        PictureData:
          type: object
          properties:
            file:
              type: file
              example: romain-taupe.jpg
    security:
      - Bearer: []
 
    paths:
      /api/login_check:
        post:
          tags:
            - Login
          summary: Login into the api.
          requestBody:
            content:
              application/json:
                schema:
                  properties:
                    username:
                      type: string
                      example: "admin@gmail.com"
                    password:
                      type: string
                      example: "boursettes"
                  type: object
          responses:
            "200":
              description: OK
              content:
                application/json:
                  schema:
                    type: object
                    properties:
                      token:
                        type: string
                      refresh_token:
                        type: string
            "401":
              description: Invalid credentials
            "400":
              description: Invalid JSON.
          security: []
 
      /api/token/refresh:
        post:
          tags:
            - Login
          summary: Login into the api by refresh token.
          requestBody:
            content:
              application/json:
                schema:
                  properties:
                    refresh_token:
                      type: string
                  type: object
          responses:
            "200":
              description: OK
              content:
                application/json:
                  schema:
                    type: object
                    properties:
                      token:
                        type: string
                      refresh_token:
                        type: string
            "401":
              description: An authentication exception occurred.
          security: []
 
  areas: # to filter documented areas
    path_patterns:
      - ^/api(?!(/doc|/doc.json|/token/refresh)$)
    #host_patterns:
    #    - ^/apissss